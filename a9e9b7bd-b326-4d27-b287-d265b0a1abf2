<File>
  <BPM_details>
    <Details>
      <DirectiveID>a9e9b7bd-b326-4d27-b287-d265b0a1abf2</DirectiveID>
      <Source>BO</Source>
      <BpMethodCode>Erp.Labor.Update</BpMethodCode>
      <Name>Labor - Send Notification for CPC</Name>
      <Order>80</Order>
      <IsEnabled>True</IsEnabled>
      <ReenterMax>1000</ReenterMax>
      <PreventDeadloops>False</PreventDeadloops>
      <VisibilityScope>0</VisibilityScope>
      <Company>HA</Company>
      <DirectiveGroup>Labor - Send Notification for CPC</DirectiveGroup>
      <IsUpToDate>True</IsUpToDate>
      <CGCCode />
      <Body><![CDATA[<?xml version="1.0" encoding="utf-16"?><DirectiveDefinition mc:Ignorable="p" AdditionalUsings="{x:Null}" Version="116" xmlns="clr-namespace:Ice.Lib.Bpm.Model;assembly=Ice.Lib.Bpm.Shared" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cm="clr-namespace:Caliburn.Micro;assembly=Caliburn.Micro" xmlns:icbb="clr-namespace:Ice.Contracts.BO.BpMethod;assembly=Ice.Contracts.BO.BpMethod" xmlns:ilbma="clr-namespace:Ice.Lib.Bpm.Model.Actions;assembly=Ice.Lib.Bpm.Shared" xmlns:ilbmc="clr-namespace:Ice.Lib.Bpm.Model.Conditions;assembly=Ice.Lib.Bpm.Shared" xmlns:iubd="clr-namespace:Ice.UI.Bpm.Designer;assembly=Ice.UI.Bpm.Designer" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:p="http://epicor.com/BpmDesigner/Ignorable" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"><DirectiveDefinition.AdditionalReferences><scg:List x:TypeArguments="icbb:ReferencesGroup" Capacity="0" /></DirectiveDefinition.AdditionalReferences><DirectiveDefinition.Nodes><x:Reference>__ReferenceID0</x:Reference><x:Reference>__ReferenceID1</x:Reference></DirectiveDefinition.Nodes><DirectiveDefinition.StartNode><DirectiveCondition False="{x:Null}" x:Name="__ReferenceID0" DisplayName="Condition 0" Id="59fb6cb3-6b0d-4ef8-a913-3c1692f50d1c"><DirectiveCondition.Condition><ConditionBlock><ConditionBlock.Items><ConditionBlockItem Postfix="{x:Null}" Prefix="{x:Null}" Operator="None"><ConditionBlockItem.Condition><ilbmc:FieldCondition VisualProperties="{x:Null}" Filter="Changed" Id="0" Operator="NotEqualsTo" ValidationState="Valid"><ilbmc:FieldCondition.Expression><ExpressionDefinition Text=""D""><ExpressionDefinition.TableParameters><scg:List x:TypeArguments="TableParameter" Capacity="0" /></ExpressionDefinition.TableParameters></ExpressionDefinition></ilbmc:FieldCondition.Expression><ilbmc:FieldCondition.Field><ColumnInfo ColumnName="RowMod" DataType="System.String" IsExtensionTable="False" IsUd="False" TableName="ttLaborDtl" TableRowTypeName="Erp.Tablesets.LaborDtlRow" /></ilbmc:FieldCondition.Field></ilbmc:FieldCondition></ConditionBlockItem.Condition></ConditionBlockItem></ConditionBlock.Items></ConditionBlock></DirectiveCondition.Condition><DirectiveCondition.True><DirectiveStep Next="{x:Null}" x:Name="__ReferenceID1" DisplayName="Execute Custom Code 0" Id="28668833-ab89-4569-9c9f-d679c8f4b035"><DirectiveStep.Action><ilbma:CustomCodeAction PrimaryTable="{x:Null}" Code="// Job has started - if Order ShipVia is CPC, then send an email notification to CCR   l. Knight 01-17-22

string processingDetails = string.Empty;
string path = @"\\hussv022\c$\Logs\";
string fileName = "TEST Labor - Send Notification for CPC" + Guid.NewGuid ().ToString () + ".txt";

processingDetails = processingDetails + "Starting Labor - Send Notification for CPC" + Environment.NewLine;

Erp.Tables.JobHead JobHead;
Erp.Tables.JobOper JobOper;
Erp.Tables.JobProd JobProd;
Erp.Tables.OrderRel OrderRel;
Erp.Tables.OrderDtl OrderDtl;
Erp.Tables.OrderHed OrderHed;
Erp.Tables.Customer Customer;
Erp.Tables.UserFile UserFile;

//Ice.Diagnostics.Log.WriteEntry("IN IN IN");
     
     
     
//Epicor.Customization.Bpm.InfoMessage.Publish("Starting BPM");
var LDRow = (from row in ttLaborDtl select row).LastOrDefault();
 
   /*Get the current labor detail record*/
   if (LDRow != null)
   {
   //Epicor.Customization.Bpm.InfoMessage.Publish("LaborDtl Found");
   //Only run the code for "End Activity"
      if (LDRow.EndActivity)
      {
      processingDetails = processingDetails + "ttLaborDtl.EndActivity.." + Environment.NewLine;
      //Epicor.Customization.Bpm.InfoMessage.Publish("EndActivity Found");
      callContextBpmData["CheckBox02"] = false;        
      bool checkIt = true;
   
      /* Check to see if it is for SUW */
      JobHead = (from JobHead_Row in Db.JobHead
                where JobHead_Row.Company == Session.CompanyID &&
                string.Compare(JobHead_Row.JobNum, LDRow.JobNum, true) == 0
                select JobHead_Row).FirstOrDefault();

      if (JobHead != null)
      {
      // Epicor.Customization.Bpm.InfoMessage.Publish("JobHead Found"); 
      processingDetails = processingDetails + "JobHead.Plant = " + JobHead.Plant + Environment.NewLine;
         if (string.Compare(JobHead.Plant, "SUW", true) != 0)
        {
        checkIt = false; 
        }
             processingDetails = processingDetails + "checkIt = " + checkIt  + Environment.NewLine;
      }

      JobOper = (from JobOper_Row in Db.JobOper
               where JobOper_Row.Company == Session.CompanyID &&
               string.Compare(JobOper_Row.JobNum, LDRow.JobNum, true) == 0 &&
               JobOper_Row.OprSeq == LDRow.OprSeq
               select JobOper_Row).FirstOrDefault();

      //Only check material on OPCODE S0900 - Pulling
      if (JobOper != null)
      {
      //Epicor.Customization.Bpm.InfoMessage.Publish("JobOper Found");
      processingDetails = processingDetails + "JobOper.OprSeq = " + JobOper.OprSeq + Environment.NewLine;        
      processingDetails = processingDetails + "ttLaborDtl_xRow.OprSeq = " + LDRow.OprSeq + Environment.NewLine;
      processingDetails = processingDetails + "JobOper.OpCode = " + JobOper.OpCode + Environment.NewLine;
    
          if (JobOper.OpCode != "SUW11010")
          {
          checkIt = false; 
          } //JobOper.Opcode

          processingDetails = processingDetails + "checkIt = " + checkIt  + Environment.NewLine;
      }  //if JobOper
   
 
      /* We use checkIt to determine if we should do the check or not */
      processingDetails = processingDetails + "If checkIt = " + checkIt  + Environment.NewLine;

     if (checkIt)
     {
     //Ice.Diagnostics.Log.WriteEntry("In CheckIt");
     // Compose email
   
     string bpmFrom = string.Empty;
     string bpmTo = string.Empty;
     string bpmCC = string.Empty;
     string bpmSubject = string.Empty;
     string bpmBody = string.Empty;
     string bpmReqDate = string.Empty;
     string vCustCnt = string.Empty;
     string vCRMCase = string.Empty;
  
     // Read JobProd to get order number
  
     JobProd = (from JobProd_Row in Db.JobProd
               where (JobProd_Row.Company == JobHead.Company) &&
               (JobProd_Row.JobNum == JobHead.JobNum) 
               select JobProd_Row).FirstOrDefault();
     {

         if (JobProd != null)
         {
         //Epicor.Customization.Bpm.InfoMessage.Publish("JobProd Found");
         OrderRel = (from OrderRel_Row in Db.OrderRel
         where (OrderRel_Row.Company == JobProd.Company) &&
         (OrderRel_Row.OrderNum == JobProd.OrderNum) &&
         (OrderRel_Row.OrderLine == JobProd.OrderLine) &&
         (OrderRel_Row.OrderRelNum == JobProd.OrderRelNum) 
         select OrderRel_Row).FirstOrDefault();
         {
    
           if (OrderRel != null)
           {
    
             if (OrderRel.ShipViaCode == "CPC")
             {

             OrderDtl = (from OrderDtl_Row in Db.OrderDtl
             where (OrderDtl_Row.Company == OrderRel.Company) &&
             (OrderDtl_Row.OrderNum == OrderRel.OrderNum) &&
             (OrderDtl_Row.OrderLine == OrderRel.OrderLine)
             select OrderDtl_Row).FirstOrDefault();
             {
        
                if (OrderDtl != null)
                {
                //Epicor.Customization.Bpm.InfoMessage.Publish("OrderDtl Found");
                OrderHed = (from OrderHed_Row in Db.OrderHed
                where (OrderHed_Row.Company == OrderRel.Company) &&
                (OrderHed_Row.OrderNum == OrderRel.OrderNum) 
                select OrderHed_Row).FirstOrDefault();
                   {

                   if (OrderHed != null)
                   {
  
                   // SugarCRM Case number - used below
                   vCRMCase = (string)OrderHed["ShortChar07"];
          
                   Erp.Tables.Customer Cust = (from Customer_Row in Db.Customer
                   where (Customer_Row.Company == OrderHed.Company) &&
                   (Customer_Row.CustNum == OrderHed.CustNum)
                   select Customer_Row).FirstOrDefault();
           
                   // Get Contact name and email address
                   Erp.Tables.CustCnt CustCnt = (from CustCnt_Row in Db.CustCnt
                   where (CustCnt_Row.Company == OrderHed.Company) &&
                   (CustCnt_Row.CustNum == OrderHed.CustNum)&&
                   (CustCnt_Row.ConNum == OrderHed.PrcConNum)  
                   select CustCnt_Row).FirstOrDefault();
                     if (CustCnt != null)
                     {
                     vCustCnt = System.Convert.ToString(CustCnt.Name);
                     }
       
                     UserFile = (from UserFile_Row in Db.UserFile
                                 where string.Compare(UserFile_Row.DcdUserID, OrderHed.EntryPerson, true) == 0
                                 select UserFile_Row).FirstOrDefault();
                     if (UserFile != null)
                     {
                     }
 
 
                    // Build Email Header
                     bpmFrom = "smtp.us@habasit.com";
                     //bpmTo = System.Convert.ToString(SalesRep.EMailAddress);
                     bpmTo = "laurie.knight@habasit.com";
                     bpmCC = "laurie.knight@habasit.com";
                     bpmSubject = "TEST - ShipVia Required for Order# " + System.Convert.ToString(OrderHed.OrderNum) + " - " + System.Convert.ToString(Cust.Name);
                     
                     //Sugar Case Number: If a case number is entered on the Order Header, then append it to the subject line and add //HA.FOOD@us.habasit.com to the cc line
                    
                     if (vCRMCase != "")
                     {
                     bpmSubject = "TEST - ShipVia Required for Order# " + System.Convert.ToString(OrderHed.OrderNum) + " - " + System.Convert.ToString(Cust.Name) + "[CASE:" + vCRMCase + "]";
                     //bpmCC = "Laurie.Knight@habasit.com; case_it@habasit.com";
                     }
              
                     // Build Email Body: Order Header
                     bpmBody =
                     "\nThe order below has entered the fabrication process and does not have all correct shipping information defined.  Please coordinate with the Customer to document the preferred carrier information on the Manifest tab of the Release within the next 48 hours." +
                     "\n" +
                     "\nOrder Number:   " + System.Convert.ToString(OrderHed.OrderNum) +
                     "\nPO Number:      " + System.Convert.ToString(OrderHed.PONum) +
                     "\n\nCustomer ID:  " + System.Convert.ToString(Cust.CustID) +
                     "\n\nCustomer:     " + System.Convert.ToString(Cust.Name) +
                     "\n\nContact:      " + vCustCnt +
                     //"\nContact email:  " + System.Convert.ToString(CustCnt.EMailAddress) +
                     "\n\nCity/St :     " + System.Convert.ToString(Cust.City) +
                     ", " + System.Convert.ToString(Cust.State) +
                    
                     //"\n\nShip By: " + bpmReqDate +
                     "\n\nOrder Date:   " + String.Format("{0:M/d/yyyy}",OrderHed.OrderDate) +
                     "\n\nReq Ship Date: " + String.Format("{0:M/d/yyyy}",OrderRel.ReqDate) +
                     "\n\nOrder Lines:  " + System.Convert.ToString(OrderHed.TotalLines) +
                      "\n" +
                      "\nShip Via:      " + System.Convert.ToString(OrderRel.ShipViaCode) +
                     "\n" +
                      "\n\nEntered By:  " + System.Convert.ToString(OrderHed.EntryPerson) +
                      "\nEntry Person Email: " + System.Convert.ToString(UserFile.EMailAddress);
 
              }// OrderHed != null
              }// OrderHed
   
         }// OrderDtl != null
         }// OrderDtl

          System.IO.File.AppendAllText (path + fileName, processingDetails); 
 
          // Send Email
          
          //Setup Default email - take this out when done testing
          //bpmTo =  "laurie.knight@us.habasit.com";
          bpmTo = "laurie.knight@habasit.com";
          //bpmCC = vSalesRepEmail + ";laurie.knight@habasit.com" + ";" + vCCShipCustomer;
          
           var mailer = GetMailer(async: true);
           var message = new Ice.Mail.SmtpMail();
           message.SetFrom(bpmFrom);
           message.SetTo(bpmTo);
           message.SetCC(bpmCC);
           message.SetSubject(bpmSubject);
           message.SetBody(bpmBody);
           mailer.Send(message);


      }  //OrderRel.ShipViaCode == "CPC"

      }  //ODRow
      }  //OrderRel 
             
     }  //JobProd != null
    }  //JobProd
   
   } // checkit
   } //LaborDtl.StartActivity

} //ttlabordtl" ExecutionRule="OnceForAllMatching" Id="0" IsAsync="False" RecordMode="Nothing" TerminateOnError="False" ValidationState="Valid" /></DirectiveStep.Action><DirectiveStep.VisualProperties><p:VisualPropertiesStorage><x:Double x:Key="ElementX">376</x:Double><x:Double x:Key="ElementY">211</x:Double><iubd:TextNote Text="{x:Null}" x:Key="Note" Background="Yellow" IsExpanded="False" IsNotifying="True" X="0" Y="0" /></p:VisualPropertiesStorage></DirectiveStep.VisualProperties></DirectiveStep></DirectiveCondition.True><DirectiveCondition.VisualProperties><p:VisualPropertiesStorage><x:Double x:Key="ElementX">591</x:Double><x:Double x:Key="ElementY">205</x:Double><iubd:TextNote Text="{x:Null}" x:Key="Note" Background="Yellow" IsExpanded="False" IsNotifying="True" X="0" Y="0" /><iubd:LinkProperties x:Key="TrueExitLink" DestinationConnectorId="10" SourceConnectorId="7"><iubd:LinkProperties.Points><cm:BindableCollection x:TypeArguments="av:Point" IsNotifying="True"><av:Point>591,250</av:Point><av:Point>496,256</av:Point></cm:BindableCollection></iubd:LinkProperties.Points></iubd:LinkProperties></p:VisualPropertiesStorage></DirectiveCondition.VisualProperties></DirectiveCondition></DirectiveDefinition.StartNode><DirectiveDefinition.Variables><scg:List x:TypeArguments="DirectiveVariable" Capacity="0" /></DirectiveDefinition.Variables><DirectiveDefinition.VisualProperties><p:VisualPropertiesStorage><x:Int32 x:Key="Ice.UI.Bpm.Widgets.CallBpmDataFormViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.CallScWorkflowViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.CustomCodeActionViewModelInstanceCounter">1</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.AttachDataTagViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.RemoveDataTagViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.ConditionViewModelInstanceCounter">1</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.EnablePostProcessingViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.AttachHoldViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.RemoveHoldsViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.InvokeBOMethodViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.InvokeEpicorFunctionViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.InvokeNetMethodViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.NotificationViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.FillTableByQueryViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.UpdateTableByQueryViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.RaiseExceptionViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.SendMailViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.SetArgumentViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.SetBpmDataFieldViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.SetByQueryViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.SetFieldViewModelInstanceCounter">0</x:Int32><x:Int32 x:Key="Ice.UI.Bpm.Widgets.ShowMessageViewModelInstanceCounter">0</x:Int32><x:Double x:Key="ElementX">588</x:Double><x:Double x:Key="ElementY">70</x:Double><iubd:TextNote Text="{x:Null}" x:Key="Note" Background="Yellow" IsExpanded="False" IsNotifying="True" X="0" Y="0" /><iubd:LinkProperties x:Key="ExitLink" DestinationConnectorId="1" SourceConnectorId="4"><iubd:LinkProperties.Points><cm:BindableCollection x:TypeArguments="av:Point" IsNotifying="True"><av:Point>648,160</av:Point><av:Point>651,205</av:Point></cm:BindableCollection></iubd:LinkProperties.Points></iubd:LinkProperties></p:VisualPropertiesStorage></DirectiveDefinition.VisualProperties></DirectiveDefinition>]]></Body>
      <SysRevID>System.Byte[]</SysRevID>
      <SysRowID>b55d4326-8d30-4ba2-ba0c-4e7b89828323</SysRowID>
    </Details>
  </BPM_details>
</File>